// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct Tile
{
    float height;
    uint owner;
    uint details;
};

RWTexture2D<float4> Result;

RWStructuredBuffer<Tile> Tiles;
RWStructuredBuffer<float3> CountryColours;

Texture2D<float4> LandTexture;
SamplerState samplerLandTexture;
Texture2D<float4> WorldNormalMap;
SamplerState samplerWorldNormalMap;

int MapMode; // How to display the map

int Resolution; // resolution of tiles
float HighestPoint; // Highest point on land
float LowestPoint; // Lowest point on land
float CountryOpacity; // Opacity of the countries in country map mode

float2 CameraPosition; // -1 to 1 on x and y
float Zoom;
float3 SunDirection;
float3 SunColour;
float SunIntensity;
float AmbientIntensity;
float3 AmbientColour;

float normalMultiplier;

static const float PI = 3.14159265f;


int2 GetCoord(int2 coord, int2 offset)
// Calculates the coord with the offset
{
    int x = coord.x + offset.x;
    int y = coord.y + offset.y;

    x = x % (uint)(Resolution * 2);
    if (x < 0)
        x = (Resolution * 2) + x;

    // 2D map sphere wrapping the y is funny
    if (y < 0)
    {
        y = 0;

        if (x < Resolution)
            x = Resolution + x;
        else
            x = x - Resolution;
    }
    else if (y > Resolution - 1)
    {
        y = Resolution - 1;

        if (x < Resolution)
            x = Resolution + x;
        else
            x = x - Resolution;
    }

    return int2(x, y);
}

uint GetPositionInBuffer(int2 coord)
{
    return coord.x * Resolution + coord.y;
}

float WindX(float lat)
{
    if (pow(3.0 * lat - 1.0, 3.0) < 1.0)
    {
        return -pow(3.0 * lat - 1.0, 3.0);
    }
    else
    {
        return -pow(3.0 * lat - 3.0, 3.0);
    }
}

// Returns x between 0 and 2 * resolution and y between 0 and resolution
float2 CalculateCoord(uint2 pixel)
{
    uint2 screenResolution = uint2(0, 0);
    Result.GetDimensions(screenResolution.x, screenResolution.y);
    float2 uv = (pixel.xy / (float2) screenResolution) * 2 - 1;
    uv *= Zoom;
    uv += CameraPosition;

    if (uv.x > 1)
        uv.x = -1 + (uv.x - 1);
    if (uv.x < -1)
        uv.x = 1 + (uv.x + 1);
    
    return float2((uv.x + 1) / 2 * float(Resolution) * 2, (uv.y + 1) / 2 * float(Resolution));
}

float3 UVToPointOnSphere(float2 uv)
{
    float theta = 2 * PI * uv.x;
    float phi = PI * uv.y;
    return float3(cos(theta) * sin(phi), -cos(phi), sin(theta) * sin(phi));
}

[numthreads(1,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float2 coord = CalculateCoord(id.xy);
    if (coord.y >= Resolution || coord.y < 0)
    {
        Result[id.xy] = float4(0.0, 0.0, 0.0, 0.0);
        return;
    }
    
    float2 coordUV = coord - int2(coord.x, coord.y);
    
    uint pos = GetPositionInBuffer(coord);
    float height = Tiles[pos].height;
    uint countryID = Tiles[pos].owner;
    float3 countryColour = CountryColours[countryID];
    bool ocean = false;
    if ((Tiles[pos].details >> 31) % 2 == 1)
        ocean = true;
    bool lake = false;
    if ((Tiles[pos].details >> 30) % 2 == 1)
        lake = true;

    float3 tileColour;
    if (ocean)
        tileColour = float3(0.0, 0.0, (1 - (height / LowestPoint)));
    else
    {
        float v = sqrt(abs(height) / HighestPoint) * 0.8 + 0.2;
        if (lake)
        {
            tileColour = float3(0.0, v * 0.5, v);
        }
        else
        {
            //tileColour = LandTexture.SampleLevel(samplerLandTexture, coordUV, 0).rgb;
            tileColour = float3(0.0, v, 0.0);
        }
    }

    switch(MapMode)
    {
        case 0: // Terrain
            // Nothing to do yet
            break;

        case 1: // Ocean
            if (ocean)
                tileColour = float3(1.0, 1.0, 1.0);
            else
                tileColour = float3(0.0, 0.0, 0.0);
            break;

        case 2: // Country
            if (countryID != 0)
            {
                tileColour = float3((1 - CountryOpacity) * countryColour + CountryOpacity * tileColour);
            }
            break;

        case 3: //Borders
            if (countryID == 0)
            {
                break;
            }

            int sameOwnerNeighbours = 0;
            if (Tiles[GetPositionInBuffer(GetCoord(coord, int2(1, 0)))].owner == countryID)
                sameOwnerNeighbours += 1;
            if (Tiles[GetPositionInBuffer(GetCoord(coord, int2(0, 1)))].owner == countryID)
                sameOwnerNeighbours += 1;
            if (Tiles[GetPositionInBuffer(GetCoord(coord, int2(-1, 0)))].owner == countryID)
                sameOwnerNeighbours += 1;
            if (Tiles[GetPositionInBuffer(GetCoord(coord, int2(0, -1)))].owner == countryID)
                sameOwnerNeighbours += 1;

            if (sameOwnerNeighbours < 4)
                tileColour = countryColour;
            break;
        
        case 4: //Simple Country
            if (!ocean)
                tileColour = countryColour;
            break;
    }
    
    float2 uv = coord / float2(2 * Resolution, Resolution);
    float3 pointOnSphere = UVToPointOnSphere(uv);
    float3 normal = pointOnSphere;
    if (!ocean)
    {
        // Find tangents to the sphere to base the normal directions on
        float3 normalRight = cross(pointOnSphere, float3(0.0, 1.0, 0.0));
        float3 normalUp = cross(pointOnSphere, normalRight); // This is technically inverted but the normalmap has y going to "down" too
    
        float3 normalMapValue = WorldNormalMap.SampleLevel(samplerWorldNormalMap, uv, 0).rgb * normalMultiplier;
        // Normal is a sphere with the components from the texture
        normal = normalize(pointOnSphere + normalRight * normalMapValue.x + normalUp * normalMapValue.y);
    }
    
    float diffuse = dot(normal, SunDirection);
    float3 sunLight = pow(diffuse, 0.5) * SunColour * SunIntensity;
    
    float3 ambientLight = AmbientColour * AmbientIntensity;
    
    float3 light = max(sunLight, ambientLight);
    
    Result[id.xy] = float4(tileColour * light, 1.0);
}
