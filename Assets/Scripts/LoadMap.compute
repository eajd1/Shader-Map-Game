// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct Tile
{
    float height;
    uint owner;
    uint details;
};

Texture2D<float> Heightmap;
Texture2D<float4> Mask;
int Resolution;
float maxHeight;
float minHeight;

RWStructuredBuffer<Tile> Tiles;

float GetHeight(uint x, uint y)
{
    uint width;
    uint height;
    Heightmap.GetDimensions(width, height);
    float normalisedX = float(x) / (float(Resolution) * 2.0);
    float normalisedY = float(y) / float(Resolution);
    uint newX = normalisedX * width;
    uint newY = normalisedY * height;
    return Heightmap[uint2(newX, newY)];
}

float4 GetMask(uint x, uint y)
{
    uint width;
    uint height;
    Mask.GetDimensions(width, height);
    float normalisedX = float(x) / (float(Resolution) * 2.0);
    float normalisedY = float(y) / float(Resolution);
    uint newX = normalisedX * width;
    uint newY = normalisedY * height;
    return Mask[uint2(newX, newY)];
}

[numthreads(1,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint index = id.x * Resolution + id.y;
    Tile tile = Tiles[index];
    float height = 0;
    uint details = 0;
    
    float heightmap = GetHeight(id.x, id.y);
    float4 mask = GetMask(id.x, id.y);
    
    if (mask.r < 0.1 && mask.g < 0.1 && mask.b > 0.9)
    {
        // Ocean
        details = details | 2147483648;
    }
    if (mask.r > 0.9 && mask.g > 0.9 && mask.b > 0.9)
    {
        // Land
        height = lerp(minHeight, maxHeight, heightmap);
    }
    if (mask.r > 0.9 && mask.g < 0.1 && mask.b < 0.1)
    {
        // Lake
        height = lerp(minHeight, maxHeight, heightmap);
        details = details | 1073741824;
    }
    
    tile.height = height;
    tile.details = details;
    Tiles[index] = tile;
}
