// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct Pixel
{
    float height;
    uint details;
    float pressure;
    float temperature;
    float humitidy;
};

RWTexture2D<float4> result;

RWStructuredBuffer<Pixel> pixels;

int mapMode; // How to display the map

float resolution; // resolution of pixels
int2 screenResolution; // resolution of the screen
float deepestPoint; // Deepest point in sea
float highestPoint; // Highest point on land
float lowestPoint; // Lowest point on land

float xOffset; // Camera X position
float yOffset; // Camera Y position
float zoom; // Camera zoom 1 - 0 where 0 is fully zoomed in

[numthreads(1,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // Calculate position in Pixel array for this pixel based of camera position and zoom
    float2 ndc = id.xy / (float2)screenResolution * 2 - 1; // -1 to 1

    float x = ndc.x * resolution * zoom;
    x = x + resolution + xOffset;
    if (x < 0)
    {
        x = (2 * resolution) + x;
    }
    else
    {
        x = x % (2 * resolution);
    }

    float y = ndc.y * resolution / 2 * zoom;
    //y = y + resolution / 2 + yOffset;

    uint2 coord = uint2(x, y + resolution / 2 + yOffset);

    Pixel pixel = pixels[coord.x * resolution + coord.y];

    switch(mapMode)
    {
        case 0:
            float height = pixel.height;

            if ((pixel.details >> 0) % 2 == 1) // Is ocean
            {
                result[id.xy] = float4(0.0, 0.0, (1 - (height / deepestPoint)), 1.0);
            }
            else if (pixel.height == 0)
            {
                // Debug
                result[id.xy] = float4(1.0, 0.0, 0.0, 1.0);
            }
            else
            {
                result[id.xy] = float4(0.0, pow(max(0, height / highestPoint), 0.3), 0.0, 1.0);
                //result[id.xy] = float4(0.0, height / highestPoint, 0.0, 1.0);
            }
            break;

        case 1:
            if ((pixel.details >> 0) % 2 == 1)
            {
                result[id.xy] = float4(1.0, 0.0, 0.0, 1.0);
            }
            else
            {
                result[id.xy] = float4(0.0, 0.0, 0.0, 1.0);
            }
            break;
    }

    if (y + yOffset > resolution / 2 || y + yOffset < -resolution / 2)
    {
        result[id.xy] = float4(0.0, 0.0, 0.0, 1.0);
    }

    // Debug
    //float2 debug = ndc + float2(xOffset / screenResolution.x, yOffset / screenResolution.y);
    //float2 debug = float2(coord.x / (resolution * 2), coord.y / resolution);
    //result[id.xy] = float4(debug, 0.0, 1.0);

    //if (coord.x % 2 == 0)
    //{
    //    result[id.xy] += float4(1.0, 0.0, 0.0, 0.0);
    //}
    //if (coord.y % 2 == 0)
    //{
    //    result[id.xy] += float4(1.0, 0.0, 0.0, 0.0);
    //}
}