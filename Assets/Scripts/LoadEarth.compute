// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct Pixel
{
    float height;
    uint details;
    float pressure;
    float temperature;
    float humitidy;
};

Texture2D<float> topography;
Texture2D<float> bathymetry;

RWStructuredBuffer<Pixel> pixels;

uint resolution; // Resolution of pixels
uint2 textureResolution; // Resolution of the textures

float maxHeight; // Maximum height of the topography
float maxDepth; // Maximum depth of the bathymetry (negative)

[numthreads(1,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float2 uv = float2(id.x / ((float)resolution * 2), id.y / (float)resolution);
    uint2 texturePos = uv * textureResolution;

    float textureValue = topography[texturePos];
    float topoHeight = lerp(0, maxHeight, textureValue);

    textureValue = bathymetry[texturePos];
    float bathyHeight = lerp(maxDepth, 0, textureValue);

    float height = topoHeight + bathyHeight;

    pixels[id.x * resolution + id.y].height = height;
    //pixels[id.x * resolution + id.y].height = 1;

    // For Debugging the shear glitch
    //if (id.y % 2 == 0) {
    //    pixels[id.x * resolution + id.y].height = 100;
    //}
    //else {
    //    pixels[id.x * resolution + id.y].height = -100;
    //}

    uint details = 0;
    if (height < 0) {
        details += 1 << 0; // Ocean
    }

    pixels[id.x * resolution + id.y].details = details;
}
